# !/usr/bin/env python3
# Modules
from goto import *
import time

#  Contiene el codigo para la Conexion con MySQL
import pymysql                           
from datetime import datetime
import var
import os
import pio
import resource
import spidev
import RPi.GPIO as GPIO
import urllib.request
import requests
import smbus
from ctypes import c_short

# Código de configuración del periférico 
#---COMIENZO DE CONFIGURACION---
import cpu
import FileStore
import VFP
import Ports

class Basedatos:

    def __init__(self):
        self.connection = pymysql.connect(
            host='localhost', #ip del servidor
            user='root',
            password='',
            db='estacion'
        )

        self.cursor = self.connection.cursor()
        #print("Conexion extablecida exitosamente con MySQL!")

    def insertar(self, temperatura, humedad, presion, lluvia, intesidadluz, fecha):
        sql = "INSERT INTO registros (temperatura, humedad, presion, lluvia, intesidadluz, fecha) VALUES (%s, %s, %s, %s, %s, %s)"
        try:
            self.cursor.execute(sql, (temperatura, humedad, presion, lluvia, intesidadluz, fecha))
            self.connection.commit()
        except Exception as e:
            raise
        
    def close(self):
        self.connection.close()
        print("Conexion cerrada exitosamente!")

#from datetime import datetime

def peripheral_setup () :
# constructores del periferico
 pio.cpu=cpu.CPU ()
 pio.storage=FileStore.FileStore ()
 pio.server=VFP.VfpServer ()
 pio.uart=Ports.UART ()
 pio.storage.begin ()
 pio.server.begin (0)
# sentencias controladores de interrupción

def peripheral_loop () :
 pass

#---CONFIGURACION TERMINADA---

# bus spi abierto
spi = spidev.SpiDev()
spi.open(0,0)

# Definir el mapeo de GPIO a LCD
LCD_RS = 4
LCD_E  = 17
LCD_D4 = 18
LCD_D5 = 27
LCD_D6 = 22
LCD_D7 = 23
Relay_pin= 24
Rain_sensor = 25
bulb_pin =  18
# Definir canales de sensores
temp_channel  = 0
Moisture_channel =1
luz_channel=2

'''

definir pin para lcd

'''
# Constantes de tiempo
E_PULSE = 0.0005
E_DELAY = 0.0005
delay = 1



GPIO.setup(LCD_E, GPIO.OUT)  # E
GPIO.setup(LCD_RS, GPIO.OUT) # RS
GPIO.setup(LCD_D4, GPIO.OUT) # DB4
GPIO.setup(LCD_D5, GPIO.OUT) # DB5
GPIO.setup(LCD_D6, GPIO.OUT) # DB6
GPIO.setup(LCD_D7, GPIO.OUT) # DB7
GPIO.setup(Relay_pin, GPIO.OUT) # Motor_1
GPIO.setup(Rain_sensor, GPIO.IN)
GPIO.setup(bulb_pin, GPIO.OUT) # DB7
# Definir algunas constantes de dispositivo
LCD_WIDTH = 16    # Máximo de caracteres por línea
LCD_CHR = True
LCD_CMD = False
LCD_LINE_1 = 0x80 # Dirección RAM LCD para la primera línea
LCD_LINE_2 = 0xC0 # Dirección RAM LCD para la segunda línea


#Funcion :lcd_init()
#Descripción de la función: esta función se utiliza para inicializar lcd enviando los diferentes comandos

def lcd_init():
  lcd_byte(0x33,LCD_CMD) # 110011 Initialise
  lcd_byte(0x32,LCD_CMD) # 110010 Initialise
  lcd_byte(0x06,LCD_CMD) # 000110 Dirección de movimiento del cursor
  lcd_byte(0x0C,LCD_CMD) # 001100 Pantalla encendida, cursor apagado, parpadeo apagado
  lcd_byte(0x28,LCD_CMD) # 101000 Longitud de datos, número de líneas, tamaño de fuente
  lcd_byte(0x01,LCD_CMD) # 000001 limpiar pantalla
  time.sleep(E_DELAY)

#Funcion :lcd_byte(bits ,mode)
#el objetivo principal de esta función es convertir los datos de bytes en bits y enviarlos al puerto LCD

def lcd_byte(bits, mode):
  # Enviar byte a pines de datos
  # bits = data
  # mode = True  para caracteres
  #        False para comando
 
  GPIO.output(LCD_RS, mode) # RS
 
  # bits altos
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&0x80==0x80:
    GPIO.output(LCD_D7, True)
 
  # alternar pin 'Enable' 
  lcd_toggle_enable()
 
  # bits bajos
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&0x08==0x08:
    GPIO.output(LCD_D7, True)
 
    # alternar pin 'Enable' 
  lcd_toggle_enable()

#Funcion : lcd_toggle_enable()
#Descripción de la función: básicamente, esto se usa para alternar Habilitar pin

def lcd_toggle_enable():
  # alternar enable
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)

#Funcion :lcd_string(message,line)
#Descripción de la función: imprimir los datos en lcd

def lcd_string(message,line):
  # Enviar cadena para mostrar
 
  message = message.ljust(LCD_WIDTH," ")
 
  lcd_byte(line, LCD_CMD)
 
  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)



 
# Funcion para leer SPI data desde MCP3008 chip
# El canal debe ser un número entero 0-7
def ReadChannel(channel):
  adc = spi.xfer2([1,(8+channel)<<4,0])
  data = ((adc[1]&3) << 8) + adc[2]
  return data

 
# funcion para calcular la temperatura
# TMP36 data, redondeado

def ConvertTemp(data,places):
 
  # ADC Valor
  # (approx)  Temp  Volts
  #    0      -50    0.00
  #   78      -25    0.25
  #  155        0    0.50
  #  233       25    0.75
  #  310       50    1.00
  #  465      100    1.50
  #  775      200    2.50
  # 1023      280    3.30
 
  temp = ((data * 330)/float(1023))
  temp = round(temp,places)
  return temp
 
def thingspeak_post(temp,moisture_level,pressure,rain_data,light_level):
    URl='https://api.thingspeak.com/update?api_key='
    KEY='HGI92BZUPPGOMWZB'
    HEADER='&field1={}&field2={}&field3={}&field4={}'.format(temp,moisture_level,pressure,rain_data,light_level)
    NEW_URL=URl+KEY+HEADER
    print(NEW_URL)
    data=urllib.request.urlopen(NEW_URL)
    print(data)
 
DEVICE = 0x77 # Dirección I2C predeterminada del dispositivo
 
#bus = smbus.SMBus(0)  # Rev 1 Pi uses 0
bus = smbus.SMBus(1) # Rev 2 Pi uses 1 
 
def convertToString(data):
  # Función simple para convertir datos binarios en string
  return str((data[1] + (256 * data[0])) / 1.2)

def getShort(data, index):
  # devuelve dos bytes de los datos como un valor de 16 bits con signo
  return c_short((data[index] << 8) + data[index + 1]).value

def getUshort(data, index):
  # devolver dos bytes de los datos como un valor de 16 bits sin signo
  return (data[index] << 8) + data[index + 1]

def readBmp180Id(addr=DEVICE):
  # Dirección de registro de ID de chip
  REG_ID     = 0xD0
  (chip_id, chip_version) = bus.read_i2c_block_data(addr, REG_ID, 2)
  return (chip_id, chip_version)
  
def readBmp180(addr=DEVICE):
  # Registrar Direcciones
  REG_CALIB  = 0xAA
  REG_MEAS   = 0xF4
  REG_MSB    = 0xF6
  REG_LSB    = 0xF7
  # Dirección de registro de control
  CRV_TEMP   = 0x2E
  CRV_PRES   = 0x34 
  # Configuración de sobremuestreo
  OVERSAMPLE = 3    # 0 - 3
  
  # Leer datos de calibración
  # Leer datos de calibración desde EEPROM
  cal = bus.read_i2c_block_data(addr, REG_CALIB, 22)

  # Convertir datos de bytes en valores de palabras
  AC1 = getShort(cal, 0)
  AC2 = getShort(cal, 2)
  AC3 = getShort(cal, 4)
  AC4 = getUshort(cal, 6)
  AC5 = getUshort(cal, 8)
  AC6 = getUshort(cal, 10)
  B1  = getShort(cal, 12)
  B2  = getShort(cal, 14)
  MB  = getShort(cal, 16)
  MC  = getShort(cal, 18)
  MD  = getShort(cal, 20)

  # leer temperatura
  bus.write_byte_data(addr, REG_MEAS, CRV_TEMP)
  time.sleep(0.005)
  (msb, lsb) = bus.read_i2c_block_data(addr, REG_MSB, 2)
  UT = (msb << 8) + lsb

  # Leer presión
  bus.write_byte_data(addr, REG_MEAS, CRV_PRES + (OVERSAMPLE << 6))
  time.sleep(0.04)
  (msb, lsb, xsb) = bus.read_i2c_block_data(addr, REG_MSB, 3)
  UP = ((msb << 16) + (lsb << 8) + xsb) >> (8 - OVERSAMPLE)

  # Refinar la temperatura
  X1 = ((UT - AC6) * AC5) >> 15
  X2 = (MC << 11) / (X1 + MD)
  B5 = X1 + X2
  #temperature = int(B5 + 8) >> 4

  # refinar presion
  B6  = B5 - 4000
  B62 = int(B6 * B6) >> 12
  X1  = (B2 * B62) >> 11
  X2  = int(AC2 * B6) >> 11
  X3  = X1 + X2
  B3  = (((AC1 * 4 + X3) << OVERSAMPLE) + 2) >> 2

  X1 = int(AC3 * B6) >> 13
  X2 = (B1 * B62) >> 16
  X3 = ((X1 + X2) + 2) >> 2
  B4 = (AC4 * (X3 + 32768)) >> 15
  B7 = (UP - B3) * (50000 >> OVERSAMPLE)

  P = (B7 * 2) / B4

  X1 = (int(P) >> 8) * (int(P) >> 8)
  X1 = (X1 * 3038) >> 16
  X2 = int(-7357 * P) >> 16
  pressure = int(P + ((X1 + X2 + 3791) >> 4))

  return (pressure/100.0)
 

# Definir retraso entre lecturas
delay = 5
lcd_init()
lcd_string("Bienvenido ",LCD_LINE_1)
time.sleep(1)
lcd_byte(0x01,LCD_CMD) # 000001 limpia pantalla
lcd_string("Estacion ",LCD_LINE_1)
lcd_string("metereologica ",LCD_LINE_2)
time.sleep(1)
lcd_byte(0x01,LCD_CMD) # 000001 limpia pantalla
# Main f
def main () :
# Setup
 peripheral_setup()
 peripheral_loop()
 #estado del Motor 
 motor_status = 0 
#  loop Infinito
 while 1 :

  temp_level = ReadChannel(temp_channel) 
  temp       = ConvertTemp(temp_level,2)
 
  # imprimir resultados
  lcd_byte(0x01,LCD_CMD) # 000001 limpia pantalla
  lcd_string("Temperatura  ",LCD_LINE_1)
  lcd_string(str(temp),LCD_LINE_2)
  time.sleep(0.1)
  
  moisture_level = ReadChannel(Moisture_channel) 
  humidity=0.000000007*(pow(moisture_level,3))-0.000008*(pow(moisture_level,2))+0.191*(moisture_level)-24.016
  # imprimir resultados
  lcd_byte(0x01,LCD_CMD) # 000001 limpia pantalla
  lcd_string("Nivel de humedad ",LCD_LINE_1)
  lcd_string(str(round(humidity,2))+"%",LCD_LINE_2)
  time.sleep(0.1)
  # imprimir resultados
  lcd_byte(0x01,LCD_CMD) # 000001 limpia pantalla
  lcd_string("Nivel de humedad ",LCD_LINE_1)
  lcd_string(str(moisture_level),LCD_LINE_2)
  time.sleep(0.1)
  
  #Datos del sensor de lluvia
  rain_data = GPIO.input(Rain_sensor)
  
  #Datos del sensor de presión
  (chip_id, chip_version) = readBmp180Id()
  pressure=readBmp180()
  lcd_byte(0x01,LCD_CMD) # 000001  limpia pantalla
  lcd_string("presion ",LCD_LINE_1)
  lcd_string(str(pressure),LCD_LINE_2)
  time.sleep(0.1) 
  
  light_level = ReadChannel(luz_channel) 
 
 
# imprimir resultados
  lcd_byte(0x01,LCD_CMD) # 000001  limpia pantalla
  lcd_string("intensidad  ",LCD_LINE_1)
  lcd_string(str(light_level),LCD_LINE_2)
  time.sleep(0.1)
  if(light_level < 100 ):
   lcd_string("luz suave",LCD_LINE_2) 
   GPIO.output(bulb_pin, True)
   time.sleep(1)
  else:
   lcd_string("luz fuerte",LCD_LINE_2) 
   GPIO.output(bulb_pin, False)
   time.sleep(1)
  
  #Enviar datos en el servidor de thingspeak
  thingspeak_post(temp,moisture_level,pressure,rain_data,light_level)
  database = Basedatos()
  fecha = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
  database.insertar(temp, moisture_level, pressure, rain_data, light_level, fecha)
  
  pass
# Ejecución de línea de comando
if __name__ == '__main__' :
   main()
